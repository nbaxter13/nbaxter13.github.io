chisq.test(as.table(rbind(table(trainade$Smoke, exclude='?'),table(testade$Smoke, exclude='?'))))$p.value
chisq.test(as.table(rbind(table(trainade$Gender, exclude='?'),table(testade$Gender, exclude='?'))))$p.value
chisq.test(as.table(rbind(table(trainade$Diabetic, exclude='?'),table(testade$Diabetic, exclude='?'))))$p.value
t.test(trainade$Ageat.study.entry, testade$Ageat.study.entry)$p.value
chisq.test(as.table(rbind(table(trainnorm$Smoke, exclude='?'),table(testnorm$Smoke, exclude='?'))))$p.value
chisq.test(as.table(rbind(table(trainnorm$Gender, exclude='?'),table(testnorm$Gender, exclude='?'))))$p.value
chisq.test(as.table(rbind(table(trainnorm$Diabetic, exclude='?'),table(testnorm$Diabetic, exclude='?'))))$p.value
t.test(trainnorm$Ageat.study.entry, testnorm$Ageat.study.entry)$p.value
chisq.test(as.table(rbind(table(trainHRnorm$Smoke, exclude='?'),table(testHRnorm$Smoke, exclude='?'))))$p.value
chisq.test(as.table(rbind(table(trainHRnorm$Gender, exclude='?'),table(testHRnorm$Gender, exclude='?'))))$p.value
chisq.test(as.table(rbind(table(trainHRnorm$Diabetic, exclude='?'),table(testHRnorm$Diabetic, exclude='?'))))$p.value
t.test(trainHRnorm$Ageat.study.entry, testnorm$Ageat.study.entry)$p.value
head(train)
nrow(train)
nrow(test)
330+161
nrow(meta)
train$sample
sep='\t'
write.table(train[,1], file='~/Desktop/glne007/training1.accnos', quote=F, sep='\t', row.names=F)
write.table(train[,1], file='~/Desktop/glne007/training1.accnos', quote=F, sep='\t', row.names=F)
write.table(train[,1], file='~/Desktop/glne007/training1.accnos', quote=F, row.names=F, col.names=F)
write.table(test[,1], file='~/Desktop/glne007/testing1.accnos', quote=F, row.names=F, col.names=F)
x<-read.table('~/Desktop/glne007/training.meta.txt', header=T)
x<-read.delim('~/Desktop/glne007/training.meta.txt', sep='\t', header=T)
head(x)
ncol(x)
cancer<-x[x$Dx=='cancer',c(15,16)]
adenoma<-x[x$Dx=='adenoma',c(15,16)]
normal<-x[x$Dx=='normal',c(15,16)]
plot(0, type='n', xlim=c(0,1), ylim=c(0,1), ylab='NMDS Axis 2', xlab='NMDS Axis 1')
points(cancer, pch=20, col=red)
points(cancer, pch=20, col='red')
points(cancer, pch=21, col='black', bg='red')
cancer<-x[x$Dx=='cancer',c(15,16)]
adenoma<-x[x$Dx=='adenoma',c(15,16)]
normal<-x[x$Dx=='normal',c(15,16)]
plot(0, type='n', xlim=c(0,1), ylim=c(0,1), ylab='NMDS Axis 2', xlab='NMDS Axis 1')
points(cancer, pch=21, col='black', bg='red')
cancer
cancer<-x[x$dx=='cancer',c(15,16)]
adenoma<-x[x$dx=='adenoma',c(15,16)]
normal<-x[x$dx=='normal',c(15,16)]
plot(0, type='n', xlim=c(0,1), ylim=c(0,1), ylab='NMDS Axis 2', xlab='NMDS Axis 1')
points(cancer, pch=21, col='black', bg='red')
plot(0, type='n', xlim=c(-1,1), ylim=c(-1,1), ylab='NMDS Axis 2', xlab='NMDS Axis 1')
points(cancer, pch=21, col='black', bg='red')
points(adenoma, pch=21, col='black', bg='green')
points(normal, pch=21, col='black', bg='blue')
shared<-read.delim('~/Desktop/glne007/training.an.0.03.shared', sep='\t', header=T)
ncol(shared)
shared<-read.delim('~/Desktop/glne007/training.an.0.03.shared', sep='\t', header=T)
shared<-read.delim('~/Desktop/glne007/training.an.0.03.0.03.subsample.0.03.filter.shared', sep='\t', header=T)
rf <- randomForest(Group ~ shared[4:ncol(shared)-1], data=shared, importance=TRUE, proximity=TRUE, ntree=1000)
library(randomForest)
rf <- randomForest(Group ~ shared[4:ncol(shared)-1], data=shared, importance=TRUE, proximity=TRUE, ntree=1000)
rf <- randomForest(Group ~ shared[,4:ncol(shared)-1], data=shared, importance=TRUE, proximity=TRUE, ntree=1000)
shared<-read.delim('~/Desktop/glne007/3dx.rf', sep='\t', header=T)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=1000)
print(rf)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000)
print(rf)
shared<-read.delim('~/Desktop/glne007/cancVSnorm.rf', sep='\t', header=T)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=1000)
print(rf)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=1000, mtry=500)
print(rf)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=1000)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=100)
print(rf)
varImpPlot(rf, type=1)
MDSplot(rf, w$Group)
MDSplot(rf, shared$Group)
importance(rf, scale=T)
varImpPlot(rf, type=1)
partialPlot(rf, w2, 'Otu000048')
partialPlot(rf, shared, 'Otu000048')
shared[shared$Group=='cancer',x$Otu000048]
shared[shared$Group=='cancer', shared$Otu000048]
shared[shared$Group=='cancer', 'Otu000048']
wilcox.test(shared[shared$Group=='cancer', 'Otu000048'],shared[shared$Group=='normal', 'Otu000048'])
summary(shared[shared$Group=='cancer', 'Otu000048'])
summary(shared[shared$Group=='normal', 'Otu000048'])
stripchart(shared[shared$Group=='cancer', 'Otu000048'])
stripchart(shared[shared$Group=='cancer', 'Otu000048'], method='jitter')
stripchart(shared[shared$Group=='normal', 'Otu000048'], method='jitter')
stripchart(shared[shared$Group=='cancer', 'Otu000048'], method='jitter')
wilcox.test(shared[shared$Group=='cancer', 'Otu000299'],shared[shared$Group=='normal', 'Otu000299'])
shared<-read.delim('~/Desktop/glne007/adenVSnorm.rf', sep='\t', header=T)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=100)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=100)
print(rf)
shared<-read.delim('~/Desktop/glne007/adenVSnorm.rf', sep='\t', header=T)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=100)
print(rf)
shared<-read.delim('~/Desktop/glne007/lesionVSnorm.rf', sep='\t', header=T)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=100)
shared<-read.delim('~/Desktop/glne007/training.an.0.03.0.03.subsample.0.03.filter.shared', sep='\t', header=T)
head(shared[1:20])
shared<-read.delim('~/Desktop/glne007/cancVSnorm.rf', sep='\t', header=T)
typeof(shared$Group)
shared$Group
shared$Group <- factor(shared$Group)
typeof(shared$Group)
attach(shared)
logit <- glm(Group ~ Otu000048 + Otu000299, data=shared, family='binomial')
summary(logit)
glm(Group ~ Otu000048, data=shared, family='binomial')
logit <- glm(Group ~ Otu000048, data=shared, family='binomial')
summary(logit)
importance
importance(rf)
shared<-read.delim('~/Desktop/glne007/cancerVSnorm.rf', sep='\t', header=T)
shared<-read.delim('~/Desktop/glne007/cancVSnorm.rf', sep='\t', header=T)
rf <- randomForest(Group ~ ., data=shared, importance=TRUE, proximity=TRUE, ntree=10000, mtry=100)
print(rf)
importance(rf, scale=T)
logit <- glm(Group ~ ., data=shared, family='binomial')
summary(logit)
logit$p.value
logit$coefficients
logit <- glm(Group ~ Otu000048 + Otu000299, data=shared, family='binomial')
summary(logit)
logit$coefficients
logit$aic
logit$linear.predictors
plot(logit$linear.predictors)
logit$rank
logit$residuals
logit$aic
logit <- glm(Group ~ Otu000048, data=shared, family='binomial')
logit$aic
logit <- glm(Group ~ Otu000299, data=shared, family='binomial')
logit$aic
wald.test
wald.test()
library(aod)
library(ggplot2)
install.packages('aod')
library(aod)
wald.test()
for(x in colnames(shared)){print(x)}
colnames(shared)[48]
colnames(shared)[49]
shared[,49]
logit <- glm(Group ~ shared[,49], data=shared, family='binomial')
summary(logit)
install.packages("boot")
install.packages(c("class", "cluster", "codetools"))
install.packages(c("highr", "KernSmooth", "knitr"))
install.packages(c("MASS", "mgcv", "nlme", "Rcpp"))
install.packages('PlayerRatings')
library(PlayerRatings)
?elo()
afl <- aflodds[,c(2,3,4,7)]
afl
robj <- elo(afl)
robj
setwd('~/Desktop/FFL')
scores <- read.delim('scores.txt', header=T, sep='\t')
head(scores)
scores
scores$home_team
teams <- levels(scores$home_team)
teams
scores[home_team=="Team USA", home_score]
scores[scores$home_team=="Team USA", home_score]
scores[scores$home_team=="Team USA", 'home_score']
scores['home_team'=="Team USA", 'home_score']
team <- 'Team USA'
c(scores[scores$home_team==team, 'home_score'], scores[scores$away_team==team, 'away_score'])
avgScores <- matrix(data=NA, nrow=10, ncol=10)
colnames(avgScores) <- c('week1','week2','week3','week4','week5','week6','week7','week8','week9','week10')
rownames(avgScores) <- c(teams)
usa <- c(scores[scores$home_team==team, 'home_score'], scores[scores$away_team==team, 'away_score'])
avgScores
avgScores['Team USA']
avgScores['Team USA',]
mean(avgScores['Team USA',])
avgScores <- matrix(data=NA, nrow=10, ncol=10)
colnames(avgScores) <- c('week1','week2','week3','week4','week5','week6','week7','week8','week9','week10')
rownames(avgScores) <- c(teams)
for(team in teams){
avgScores[team,] <- c(scores[scores$home_team==team, 'home_score'], scores[scores$away_team==team, 'away_score'])
}
avgScores
hist(avgScores['Team USA',])
hist(avgScores['Team McCrone',])
usa<-avgScores['Team USA',]
jt<-avgScores['Team McCrone',]
usa
jt
team1 <- usa
team2 <- jt
mu <- mean(byTeam[team1,]) - mean(byTeam[team2,])
byTeam <- matrix(data=NA, nrow=10, ncol=10)
colnames(byTeam) <- c('week1','week2','week3','week4','week5','week6','week7','week8','week9','week10')
rownames(byTeam) <- c(teams)
for(team in teams){
byTeam[team,] <- c(scores[scores$home_team==team, 'home_score'], scores[scores$away_team==team, 'away_score'])
}
mu <- mean(byTeam[team1,]) - mean(byTeam[team2,])
team1 <- 'Team USA'
team2 <- 'Team McCrone'
mu <- mean(byTeam[team1,]) - mean(byTeam[team2,])
mu
mu <- mean(byTeam[team1,]) - mean(byTeam[team2,])
sigma <- sqrt(sd(byTeam[team1,]) + sd(byTeam[team2,]))
phi <- 1-(mu/sigma)*-1
mu
sigma
phi
z.test
pnorm(0, mean=mu, sd=sigma^2)
team1
mean(byTeam[team1,])
mean(byTeam[team2,])
winProb <- function(team1,team2){ #calculates the probability that team1 will beat team2
mu <- mean(byTeam[team1,]) - mean(byTeam[team2,])
sigma <- sqrt(sd(byTeam[team1,]) + sd(byTeam[team2,]))
phi <- 1-(mu/sigma)*-1
prob <- 1-pnorm(0, mean=mu, sd=sigma^2)
return(prob)
}
winProb('Team USA','Team McCrone')
winProb('Team McCrone','Team USA')
winProb('20% Effort 80% Victory','Team USA')
teams
winProb("20% effort 80% victory",'Team USA')
winProb("20% effort 80% victory","Free Lunch")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
winProb("20% effort 80% victory","Free Lunch")
byTeam
wk10 <- byTeam(week10)
wk10 <- byTeam$week10
wk10 <- byTeam[,week10]
wk10 <- byTeam[,'week10']
wk10
wk10 <- unlist(byTeam[,'week10'])
wk10
wk10 <- byTeam[,'week10']
wk9 <- byTeam[,'week9']
plot(wk10,wk9)
cor.test(wk10,wk9)
cor.test(wk10,wk9, method='spearman')
avg <- apply(byTeam, mean)
avg <- apply(byTeam, FUN=mean)
avg <- apply(byTeam, FUN=mean, MARGIN=1)
acg
avg
cor.test(avg, wk10)
plot(avg, wk10)
cor.test(avg, wk10, method='spearman')
avg <- apply(byTeam[,1:9], FUN=mean, MARGIN=1)
avg
plot(avg, wk10)
cor.test(avg, wk10)
cor.test(avg, wk10, method='Spearman')
cor.test(avg, wk10, method='spearman')
abline(lm(wk10~avg))
setwd('~/Desktop/FFL')
scores <- read.delim('scores.txt', header=T, sep='\t')
teams <- levels(scores$home_team)
byTeam <- matrix(data=NA, nrow=10, ncol=10)
colnames(byTeam) <- c('week1','week2','week3','week4','week5','week6','week7','week8','week9','week10')
rownames(byTeam) <- c(teams)
for(team in teams){
byTeam[team,] <- c(scores[scores$home_team==team, 'home_score'], scores[scores$away_team==team, 'away_score'])
}
print(byTeam)
wk10 <- byTeam[,'week10']
avg <- apply(byTeam[,1:9], FUN=mean, MARGIN=1)
plot(avg,wk10, pch=16, col <- c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green'))
plot(avg, wk10)
plot(avg, wk10, pch=16, col=c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green'))
plot(avg, wk10, pch=16, cex=2, col=c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green'))
wk10 <- byTeam[,'week10']
avg <- apply(byTeam[,1:9], FUN=mean, MARGIN=1)
cols<-c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green')
plot(avg, wk10, pch=16, cex=2, col=cols)
legend('topleft', legend=rownames(byTeam), col=cols, lwd=3, cex=0.8, box.lwd=0)
legend('topleft', legend=rownames(byTeam), col=cols, pch=16, cex=1.5, box.lwd=0)
legend('topleft', legend=rownames(byTeam), col=cols, pch=16, cex=1, box.lwd=0)
legend('topleft', legend=rownames(byTeam), col=cols, pch=16, cex=0.8, pt.cex=1.5, box.lwd=0)
wk10 <- byTeam[,'week10']
avg <- apply(byTeam[,1:9], FUN=mean, MARGIN=1)
cols<-c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green')
plot(avg, wk10, pch=16, cex=2, col=cols)
legend('topleft', legend=rownames(byTeam), col=cols, pch=16, cex=0.8, pt.cex=1.5, box.lwd=0)
abline(lm(wk10~avg), lty=2)
wk10 <- byTeam[,'week10']
avg <- apply(byTeam[,1:9], FUN=mean, MARGIN=1)
cols<-c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green')
plot(avg, wk10, pch=16, cex=2, col=cols, ylab='Week 10 Score', xlab='Average Score Weeks 1-9')
legend('topleft', legend=rownames(byTeam), col=cols, pch=16, cex=0.8, pt.cex=1.5, box.lwd=0)
abline(lm(wk10~avg), lty=2)
cor <- cor.test(avg, wk10)
cor$coefficient
cor$statistic
cor$estimate
?xtable()
library(xtable)
install.packages('xtable')
library(xtable)
xtable(byTeam)
winProb("Tibbers Domination","Team UMICHed me!")
byTeam
format((winProb("Tibbers Domination","Curmudgeonly SchlossBot")*winProb("Team U-MICHed me!","Jhansi, def not Matt")*winProb("Curmudgeonly SchlossBot","Jhansi, def not Matt", margin=-58)) + winProb("Curmudgeonly SchlossBot","Tibbers Domination")), digits=3)
format(winProb("Tibbers Domination","Curmudgeonly SchlossBot")*winProb("Team U-MICHed me!","Jhansi, def not Matt")*winProb("Curmudgeonly SchlossBot","Jhansi, def not Matt", margin=-58)), digits=3)
plot.default()
library(gplots)
install.packages('gplots')
library(gplots)
dmm <- read.table('Desktop/all_had/dmm.relabund.txt', header=T)
heights <- matrix(c(dmm[,1],dmm[,3],dmm[,5]), nr=3, byrow=T)
genera <- c()
genera[1] <-expression(italic(Bacteroides))
genera[2] <-"Porphyromonadaceae"
genera[3] <-expression(paste(italic(Clostridium)," XIVa"))
genera[4] <-expression(italic(Akkermansia))
genera[5] <-expression(paste(italic(Clostridium)," XI"))
genera[6] <-"Lachnospiraceae"
genera[7] <-expression(paste(italic(Clostridium)," XVIII"))
genera[8] <-"Enterobacteriaceae"
genera[9] <-expression(italic(Parabacteroides))
genera[10] <-expression(italic(Flavonifractor))
genera[11] <-expression(italic(Alistipes))
CI <- matrix(c(dmm[,2],dmm[,4],dmm[,6]), nr=3, byrow=T)
uci <- heights + CI
lci <- heights - CI
dmm <- read.table('~/Desktop/SchlossLab/humanized_aomdss/dmm.relabund.txt', header=T)
heights <- matrix(c(dmm[,1],dmm[,3],dmm[,5]), nr=3, byrow=T)
genera <- c()
genera[1] <-expression(italic(Bacteroides))
genera[2] <-"Porphyromonadaceae"
genera[3] <-expression(paste(italic(Clostridium)," XIVa"))
genera[4] <-expression(italic(Akkermansia))
genera[5] <-expression(paste(italic(Clostridium)," XI"))
genera[6] <-"Lachnospiraceae"
genera[7] <-expression(paste(italic(Clostridium)," XVIII"))
genera[8] <-"Enterobacteriaceae"
genera[9] <-expression(italic(Parabacteroides))
genera[10] <-expression(italic(Flavonifractor))
genera[11] <-expression(italic(Alistipes))
CI <- matrix(c(dmm[,2],dmm[,4],dmm[,6]), nr=3, byrow=T)
uci <- heights + CI
lci <- heights - CI
par(mar=c(6,4,1,0))
b <-barplot2(heights, beside=T, ylim=c(0,0.6), col=c('red3','cornsilk4','blue3'), plot.ci=T, ci.l=lci, ci.u=uci, ci.lwd=1.5, ci.col=c('red3','cornsilk4','blue3'), ylab='Relative abundance')
legend(30,0.5, c('Enterotype 1', 'Enterotype 2', 'Enterotype 3'), pch= 15, cex=1, pt.cex=2, col=c('red3','cornsilk4','blue3'), bty='n')
text(b[2,], par("usr")[3] - 0.025, srt = 45, adj = 1, cex=0.85, labels = genera, xpd = TRUE)
axis(1, c(0,b[2,]), labels=F)
b <-barplot2(heights, beside=T, ylim=c(0.2,0.6), col=c('red3','cornsilk4','blue3'), plot.ci=T, ci.l=lci, ci.u=uci, ci.lwd=1.5, ci.col=c('red3','cornsilk4','blue3'), ylab='Relative abundance')
legend(30,0.5, c('Enterotype 1', 'Enterotype 2', 'Enterotype 3'), pch= 15, cex=1, pt.cex=2, col=c('red3','cornsilk4','blue3'), bty='n')
text(b[2,], par("usr")[3] - 0.025, srt = 45, adj = 1, cex=0.85, labels = genera, xpd = TRUE)
axis(1, c(0,b[2,]), labels=F)
b <-barplot2(heights, beside=T, ylim=c(0,0.6), col=c('red3','cornsilk4','blue3'), plot.ci=T, ci.l=lci, ci.u=uci, ci.lwd=1.5, ci.col=c('red3','cornsilk4','blue3'), ylab='Relative abundance')
library(gplots)
dmm <- read.table('~/Desktop/SchlossLab/humanized_aomdss/dmm.relabund.txt', header=T)
heights <- matrix(c(dmm[,1],dmm[,3],dmm[,5]), nr=3, byrow=T)
genera <- c()
genera[1] <-expression(italic(Bacteroides))
genera[2] <-"Porphyromonadaceae"
genera[3] <-expression(paste(italic(Clostridium)," XIVa"))
genera[4] <-expression(italic(Akkermansia))
genera[5] <-expression(paste(italic(Clostridium)," XI"))
genera[6] <-"Lachnospiraceae"
genera[7] <-expression(paste(italic(Clostridium)," XVIII"))
genera[8] <-"Enterobacteriaceae"
genera[9] <-expression(italic(Parabacteroides))
genera[10] <-expression(italic(Flavonifractor))
genera[11] <-expression(italic(Alistipes))
CI <- matrix(c(dmm[,2],dmm[,4],dmm[,6]), nr=3, byrow=T)
uci <- heights + CI
lci <- heights - CI
#pdf(file="Desktop/figures/DMMbarplot.pdf", width=10, height=4)
par(mar=c(6,4,1,0))
b <-barplot2(heights, beside=T, ylim=c(0,0.6), col=c('red3','cornsilk4','blue3'), plot.ci=T, ci.l=lci, ci.u=uci, ci.lwd=1.5, ci.col=c('red3','cornsilk4','blue3'), ylab='Relative abundance')
legend(30,0.5, c('Enterotype 1', 'Enterotype 2', 'Enterotype 3'), pch= 15, cex=1, pt.cex=2, col=c('red3','cornsilk4','blue3'), bty='n')
text(b[2,], par("usr")[3] - 0.025, srt = 45, adj = 1, cex=0.85, labels = genera, xpd = TRUE)
axis(1, c(0,b[2,]), labels=F)
#dev.off()
teams
library(knitr)
library(shiny)
head(cars)
typeof(cars)
```{r, winProbWidget}
inputPanel(
selectInput("team1", label="Winner", choices=teams, selected="20% effort 80% victory")
selectInput("team2", label="Loser", choices=teams, selected="Team McCrone")
numericInput("marg", label="Minimum Margin of Victory", value=0)
)
prob <- winProb(team1, team2, margin=marg)
output <- matrix(c(team1,team2,marg,prob), nrow=1, ncol=4)
colnames(output) <- c("Winner","Loser","Margin","Probability")
renderTable(output)
```
inputPanel(
selectInput("team1", label="Winner", choices=teams, selected="20% effort 80% victory"),
selectInput("team2", label="Loser", choices=teams, selected="Team McCrone"),
numericInput("marg", label="Minimum Margin of Victory", value=0)
)
prob <- winProb(input$team1, input$team2, margin=input$marg)
output <- matrix(c(team1,team2,marg,prob), nrow=1, ncol=4)
colnames(output) <- c("Winner","Loser","Margin","Probability")
renderTable(output)
?reactive90
?reactive()
inputPanel(
selectInput("team1", label="Winner", choices=teams, selected="20% effort 80% victory"),
selectInput("team2", label="Loser", choices=teams, selected="Team McCrone"),
numericInput("marg", label="Minimum Margin of Victory", value=0)
)
output <- reactive({
prob <- winProb(input$team1, input$team2, margin=as.numeric(input$marg))
})
output
output()
runExample("01_hello")
byTeam
plot(byTeam, type='l')
byTeam["Team USA"]
byTeam["Team USA",]
plot(0, type='n', ylim=c(40,200), xlim=c(1,9), ylab='Score', xlab='Week')
points(byTeam["Team USA",], type='l', col='red', lwd=3)
dev.off()
plot(0, type='n', ylim=c(40,200), xlim=c(1,9), ylab='Score', xlab='Week')
points(byTeam["Team USA",], type='l', col='red', lwd=3)
plot(0, type='n', ylim=c(40,200), xlim=c(1,10), ylab='Score', xlab='Week')
points(byTeam["Team USA",], type='l', col='red', lwd=3)
teams
match("Team McCrone", teams)
match(c("Team McCrone", "Team USA"), teams)
write.table(byTeam, file="~/Desktop/FFL/scores.byTeam.txt", quote=F)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt')
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt', header=T, row.names=T)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt', header=T, row.names=1)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt', header=T)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt')
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t')
scores
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t', row.names=1)
scores
scores
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t', row.names=1)
scores
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t')
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t')
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t', row.names=T)
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t', row.names=1)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt')
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt', header=T)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt', header=T)
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt')
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt')
scores<-read.table('~/Desktop/FFL/scores.byTeam.txt')
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t', row.names=1)
scores
teams <- row.names(scores)
tea,s
teams
scores[3,]
whichTeams <- teams[c(1,5,8,10)]
whichTeams
rows <- match(input$whichTeams, teams)
rows <- match(whichTeams, teams)
rows
cols <- c('red','blue','green','orange','yellow','purple','black','grey','dark red','dark green')
plot(0, type='n', ylim=c(40,200), xlim=c(1,10), ylab='Score', xlab='Week')
for(i in rows){
points(scores[i,], type='l', col=cols[i], lwd=3)
}
rows
socres
scores
for(i in rows){
points(scores[i,], type='l', col=cols[i], lwd=3)
}
scores[1,]
points(scores[1,], type='l', col=cols[i], lwd=3)
points(unlist(scores[1,]), type='l', col=cols[i], lwd=3)
for(i in rows){
points(unlist(scores[i,]), type='l', col=cols[i], lwd=3)
}
getwd
getwd()
setwd("~/Desktop/github/nbaxter13.github.io/_knitr")
scores<-read.delim('~/Desktop/FFL/scores.scores.txt', sep='\t', row.names=1)
winProb <- function(team1,team2,margin=0){ #calculates the probability that team1 will beat team2 by a given margin
mu <- mean(scores[team1,]) - mean(scores[team2,]) #mu is the mean difference in scores betwen the Teams 1 and 2
sigma <- sqrt(sd(scores[team1,]) + sd(scores[team2,])) #sigma is their combined variance
phi <- 1-(mu/sigma)*-1 #phi is the distribution of the differences in score
prob <- 1-pnorm(margin, mean=mu, sd=sigma^2) #then we can calculate the probability of Team1 beating Team2
return(prob)
}
scores<-read.delim('~/Desktop/FFL/scores.byTeam.txt', sep='\t', row.names=1)
teams <- row.names(scores)
winProb <- function(team1,team2,margin=0){ #calculates the probability that team1 will beat team2 by a given margin
mu <- mean(scores[team1,]) - mean(scores[team2,]) #mu is the mean difference in scores betwen the Teams 1 and 2
sigma <- sqrt(sd(scores[team1,]) + sd(scores[team2,])) #sigma is their combined variance
phi <- 1-(mu/sigma)*-1 #phi is the distribution of the differences in score
prob <- 1-pnorm(margin, mean=mu, sd=sigma^2) #then we can calculate the probability of Team1 beating Team2
return(prob)
}
teams
winProb("20% effort 80% victory", "Curmudgeonly SchlossBot")
scores
scores["Curmudgeonly SchlossBot",]
mean(scores["Curmudgeonly SchlossBot",])
mean(unlist(scores["Curmudgeonly SchlossBot",]))
